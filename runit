#!/bin/bash
set -o pipefail
#包括管道命令的返回值,会变成最后一个返回非零的管道命令的返回值

# environment
SPORT=8080
COLOR_ARRAY=('10' '11' '12' '13' '14')
#端口为8080,颜色的列表

# variable
procfile=""
envfile=""

function usage() {
    echo "Usage: runit [-c] [-f procfile|Procfile] [-e envfile|.env]
             -c: check procfile and envfile
             -f: load the procfile
             -e: load the envfile
             -h: help information
             "
}

function verify_env() {
    local env_file="$1"
    #局部变量local  env_file获取第一个参数
    local ret_val=0

    [[ ! -f "${env_file}" ]] && my_err "envfile not exists" && return 1
    #如果文件不存在
    while read nextline; do
        if echo "${nextline}" | grep -v "="; then
            my_err "no_equal_mark"
            continue
        fi
        #如果环境变量文件非法,即没有=
        key="${nextline%%=*}"#第一个=前面的值
        value="${nextline#*=}"#第一个=后面的值
        echo "${key}" | grep -q "[^a-zA-Z_]" && my_err "invalid_char" && ret_val=1
        #字符串中除了英文字母和_就是非法
        echo "${value}" | grep -qE "[[:space:]]" && my_err "value_have_space" && ret_val=1
        #如果有空格就是非法
    done < <(grep -vE "^[[:space:]]*#" "${env_file}" | grep -v "^$")
    return ${ret_val}
}


function verify_proc() {
    local proc_file="$1"
    local ret_val=0

    [[ ! -f "${proc_file}" ]] && my_err "procfile not exists" && return 1

    while read nextline ; do
        if echo "${nextline}" | grep -v ":"; then
            my_err "no_colon_command"
            continue
        fi
        key="${nextline%%:*}"
        value="${nextline#*:}"
        echo "${key}" | grep -q [^a-zA-Z_] && my_err "invalid_char" && ret_val=1
    done < <(grep -vE "^[[:space:]]*#" "${proc_file}")
    return ${ret_val}
}


function my_err() {
    errinfo="$1"
    echo "${errinfo}"
}


function log() {
    local name="$1"
    local command="$2"
    local color="$3"
    cur_time=$(date +%H:%M:%s)

    printf "\E[${color}m${cur_time} %-7s] | " "${name}"

    tput sgr0
    #清除屏幕上的属性
    echo "${command}"
    return 0
}


function run_command() {
    local number="1"
    local proc_name="$1"
    local command="$2"
    local cur_pid=$!
    #取出pid
    local cur_color="${COLOR_ARRAY[$number]}"
    local comm_port=$(echo "${command}" | grep -e "\$PORT")

    [[ -n "${comm_port}" ]] && [[ -z "${PORT}" ]] && PORT=8080
    bash -c "${command}" > >(
        while read result; do
            log "${proc_name}" "${result}" "${COLOR}"
        done
    ) 2>&1 &
    #输出错误信息

    local output="$(eval echo \"${command}\")"
    log "${proc_name}" "${output} start with pid ${cur_pid}" "${cur_color}"
    [[ $? -ne 0 ]] && return 1
    #上一条结束返回值如果不是0

    [[ -n "${comm_port}" ]] && PORT=$((${PORT} + 1))

    (( number ++ ))

    return 0
}


function load_env_file() {
    set -a
    #表示已经修改的变量,以供输出到环境变量
    local env_lists="$1"
    for flag in $(echo "${env_lists}"); do
        [[ -f "${flag}" ]] && source "${flag}"
    done
    return 0
}


function run_procfile() {
    local proc_file="$1"
    [[ ! -f "${proc_file}" ]] && my_err "this procfile is not exists" && return 1
    while read nextline; do
        if echo "${nextline}" | grep -qv ":"; then
            my_err "no_colon_command"
            continue
        fi
        local key="${nextline%%:*}"
        local value="${nextline#*:}"
        [[ -n "${key}" ]] && [[ -n "${value}" ]] && run_command "${key}" "${value}"
        [[ $? -ne 0 ]] && return 1
    done < <(grep "" "${proc_file}" | grep -vE "[[:space:]]*#" | grep -v "^$" )
    wait
    return 0
}


function main() {
    local check=false
    while getopts "f:e:ch" flag
    do
        case ${flag} in
            c) check=true ;;
            f) procfile="${OPTARG}" ;;
            e) envfile="${OPTARG}" ;;
            *) usage ;;
        esac
    done

    if ${check}; then
        if [[ -n "${procfile}" ]]; then
            verify_proc "${procfile}"
            PROC_RET_VALUE=$?
            [[ ${PROC_RET_VALUE} -ne 0 ]] && exit 1
        else
            my_err "The procfile is null"
            exit 1
        fi

        if [[ -z "${envfile}" ]];then
            envfile="./.env"
        fi
        verify_env  "${envfile}"
        ENV_RET_VALUE=$?
        [[ ${ENV_RET_VALUE} -ne 0 ]] && exit 1

    else
        if [[ -z "${envfile}" ]]; then
            envfile="./.env"
        fi

        load_env_file "${envfile}"
        LOAD_ENV_RET_VALUE=$?
        [[ ${LOAD_ENV_RET_VALUE} -ne 0 ]] && exit 1

        if [[ -z "${procfile}" ]]; then
            procfile="./Procfile"
        fi

        run_procfile "${procfile}"
        RUN_RET_VALUE=$?
        [[ RUN_RET_VALUE -ne 0 ]] && exit 1
    fi
    exit 0
}
#停掉占用8080端口的进程,不过只让用grep,所以没有执行
function kill_process(){

    pid=`netstat -anp | grep 8080 |awk '{printf $7}' | cut -d/ -f1`
    kill -9 $pid                                                                                     

}

main "$@"
